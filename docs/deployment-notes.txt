
Deployment Steps
------------------------------
Prompts:
- you are DevOp engineer
- you team has a fastapi web app that uses the custom vision service to classify images of grass and weed.
the app is writen in python
- the code is in a github repository
- your team needs to automate the deployment from github to azure app service
- the team needs control of the deployment, and wants to perform the deployment manually from the cli on their local machine
- the team wants to deploy the app to a new resource group
- the team wants to deploy the app to a new app service plan
- the team wants to deploy the app to a new app service
- provide the commands to deploy the app to azure app service



1.1 login into azure in cli
   az login

1.2 create service principal (rbac) for deployinw with Github Actions
   az ad sp create-for-rbac --name azure_cicd_cred --sdk-auth

1.3 set the required secrets in github Project, Settings and variables 
   client-id: ${{ secrets.AZUREAPPSERVICE_CICD_CLIENTID }}
   tenant-id: ${{ secrets.AZUREAPPSERVICE_CICD_TENANTID }}
   subscription-id: ${{ secrets.AZUREAPPSERVICE_CICD_SUBSCRIPTIONID }}



2. resource group
    az group create \
       --name weed-detection-resources-group \
       --location westus

3. create app service plan
    az appservice plan create \
        --name weed-detection-services-plan \
        --resource-group weed-detection-resources-group \
        --sku B1 \
        --is-linux

4. create the web app itself (note: this is the app service)
    az webapp create \
    --name aiweeddetectionapi \
    --plan weed-detection-services-plan \
    --resource-group weed-detection-resources-group \
    --runtime "PYTHON|3.12"

5. set the startup command
    az webapp config set \
    --name aiweeddetectionapi \
    --resource-group weed-detection-resources-group \
    --startup-file "gunicorn -w 4 -k uvicorn.workers.UvicornWorker api:app"

5.1. MANUAL via portal: environment 2 variables to be set - the only environment variables that need to be set, 
     everything else is in the Azure Application Configuration outside this app
    - ConfigSource=EnvironmentVariables|AzureAppConfiguration
    - AzureConfigConnectionString=<your Azure App Configuration Connectstring>


6. setup deployment from github - it performs the deployment from the github repo to the app service
    az webapp deployment source config \
    --name aiweeddetectionapi \
    --resource-group weed-detection-resources-group \
    --repo-url https://github.com/kowusu01/AIWeedDetectionAPI.git \
    --branch main 

    
7. restart the app
az webapp restart --name aiweeddetectionapi --resource-group weed-detection-resources-group

8. redeploy
    az webapp deployment source sync \
    --name weeddetectionapi \
    --resource-group weed-detection-resources-group



Test the app
---------------
curl -X 'POST' 'http://127.0.0.1:8000/analyze/filename/test-11-all-grass.JPG' -H 'accept: application/json'


Runnning the app
-----------------
local:
 - fastapi dev app.py
 - uvicorn app:app --reload
azure app service startup command:
 - gunicorn -w 4 -k uvicorn.workers.UvicornWorker api:app

 Monitor logs
 -------------
 NOTE: app service logs works out of the box without you configuring anything, as far as I know.
       what I noticed was that if your log file has an extention .log, the monitoring picks it up automatically.
       .
 cli:
    az webapp log tail --name aiweeddetectionapi --resource-group weed-detection-resources-group

NOTES: 
Getting the automated build from the cli caused many days of pain. 
- I didn't want to go to either github or Azure portal to trigger the build, 
- the build must be inittiated from the CLI.
- so in Step 5 above, I added --manual option to set the the deployment to manual
- the cli deploy seemed to work, but the app service did does not pick up the changes after subsequent commits.
- tried to sync the deployment, restart the app service but changes were not seen.

- Finally, I removed the --manual build option from the build command and it worked,
- the command: [az webapp deployment ...] performs the deployment, 
  which means that if you want manual deployment, that is your last button to press
- I am happy with this, I can now deploy from the CLI, in less than 5 minutes!

Logs
- Always check the build logs, it will tell you what is wrong
- make sure you have the right credentials set in the github secrets for the build to work
  you only have to set it up once for the repo, and you can use it for all the deployments from that repo

Github Actions build credentials
- run the cmd: az ad sp create-for-rbac --name azure_cicd_cred --sdk-auth
- set the required credentials in the github secrets, and the deployment worked fine
    client-id: ${{ secrets.AZUREAPPSERVICE_CICD_CLIENTID }}
    tenant-id: ${{ secrets.AZUREAPPSERVICE_CICD_TENANTID }}
    subscription-id: ${{ secrets.AZUREAPPSERVICE_CICD_SUBSCRIPTIONID }}

